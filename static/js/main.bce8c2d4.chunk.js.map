{"version":3,"sources":["components/Nav.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","Table","useState","table","setTable","sortType","setSortType","useEffect","type","newArr","db","sort","a","b","id","firstName","lastName","department","Error","console","log","sortArr","scope","onClick","map","emp","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAUeA,G,MARH,kBACT,yBAAKC,UAAU,qDACZ,yBAAKA,UAAU,aACZ,sD,qBC4DMC,EA3DD,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAEVC,EAFU,KAEHC,EAFG,OAGeF,mBAAS,MAHxB,mBAGVG,EAHU,KAGAC,EAHA,KAiCjB,OA5BAC,qBAAU,YACS,SAAAC,GACb,IAAIC,EAEJ,OAAQD,GACL,IAAK,KACFC,EAAS,YAAIC,GAAIC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,GAAKD,EAAEC,MACxC,MACH,IAAK,QACFL,EAAS,YAAIC,GAAIC,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEG,UAAYF,EAAEE,UAAa,EAAMF,EAAEE,UAAYH,EAAEG,WAAc,EAAI,KACrG,MACH,IAAK,OACFN,EAAS,YAAIC,GAAIC,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEI,SAAWH,EAAEG,SAAY,EAAMH,EAAEG,SAAWJ,EAAEI,UAAa,EAAI,KACjG,MACH,IAAK,OACFP,EAAS,YAAIC,GAAIC,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEK,WAAaJ,EAAEI,WAAc,EAAMJ,EAAEI,WAAaL,EAAEK,YAAe,EAAI,KACzG,MACH,QACG,MAAM,IAAIC,MAAMC,QAAQC,IAAI,kBAElChB,EAASK,GAGZY,CAAQhB,KAER,CAACA,IAID,yBAAKL,UAAU,aACf,2BAAOA,UAAU,SACd,2BAAOA,UAAU,cACd,4BACG,wBAAIsB,MAAM,OAAM,4BAAQC,QAAS,kBAAMjB,EAAY,QAAnC,OAChB,wBAAIgB,MAAM,OAAM,4BAAQC,QAAS,kBAAMjB,EAAY,WAAnC,eAChB,wBAAIgB,MAAM,OAAM,4BAAQC,QAAS,kBAAMjB,EAAY,UAAnC,cAChB,wBAAIgB,MAAM,OAAM,4BAAQC,QAAS,kBAAMjB,EAAY,UAAnC,iBAGtB,+BACIH,EAAMqB,KAAI,SAACC,EAAKC,GAAN,OACR,wBAAIA,IAAKA,GACN,wBAAIJ,MAAM,OAAOG,EAAIX,IACrB,4BAAKW,EAAIV,WACT,4BAAKU,EAAIT,UACT,4BAAKS,EAAIR,oBC1CZU,MATf,WACE,OACC,oCACG,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.bce8c2d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = () => (\r\n   <nav className=\"nav nav-expand-lg navbar-light bg-light py-4 mb-4\">\r\n      <div className=\"container\">\r\n         <h1>Employee Directory</h1>\r\n      </div>\r\n   </nav>\r\n)\r\n\r\nexport default Nav;","import React, { useState, useEffect } from 'react';\r\nimport db from '../db/db.json';\r\n\r\n\r\n\r\n\r\nconst Table = () => {\r\n\r\n   const [table, setTable] = useState([]);\r\n   const [sortType, setSortType] = useState('id');\r\n\r\n   useEffect(() => {\r\n      const sortArr = type => {\r\n         let newArr;\r\n\r\n         switch (type) {\r\n            case \"id\":\r\n               newArr = [...db].sort((a,b) => a.id - b.id);\r\n               break;\r\n            case \"first\":\r\n               newArr = [...db].sort((a,b) => (a.firstName > b.firstName) ? 1 : ((b.firstName > a.firstName) ? -1 : 0));\r\n               break;\r\n            case \"last\":\r\n               newArr = [...db].sort((a,b) => (a.lastName > b.lastName) ? 1 : ((b.lastName > a.lastName) ? -1 : 0));\r\n               break;\r\n            case \"dept\":\r\n               newArr = [...db].sort((a,b) => (a.department > b.department) ? 1 : ((b.department > a.department) ? -1 : 0));\r\n               break;\r\n            default:\r\n               throw new Error(console.log(\"Invalid value\"));\r\n         }\r\n         setTable(newArr);\r\n      }\r\n\r\n      sortArr(sortType)\r\n   \r\n   }, [sortType])\r\n   \r\n\r\n   return (\r\n      <div className=\"container\">\r\n      <table className=\"table\">\r\n         <thead className=\"thead-dark\">\r\n            <tr>\r\n               <th scope=\"col\"><button onClick={() => setSortType('id')}>id</button></th>\r\n               <th scope=\"col\"><button onClick={() => setSortType('first')}>First Name</button></th>\r\n               <th scope=\"col\"><button onClick={() => setSortType('last')}>Last Name</button></th>\r\n               <th scope=\"col\"><button onClick={() => setSortType('dept')}>Department</button></th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            {table.map((emp, key) => (\r\n               <tr key={key}>\r\n                  <th scope=\"row\">{emp.id}</th>\r\n                  <td>{emp.firstName}</td>\r\n                  <td>{emp.lastName}</td>\r\n                  <td>{emp.department}</td>\r\n               </tr>\r\n            ))}\r\n         </tbody>\r\n      </table>\r\n   </div>\r\n   )\r\n};\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Table from './components/Table'\n\nfunction App() {\n  return (\n   <>\n      <Nav />\n      <Table />\n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}